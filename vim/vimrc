" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
" ======================================================================
set nocompatible
autocmd! BufWritePost ~/.vimrc source %
" ================setting mapleader ====================================
let mapleader=","

if has("syntax")
  syntax on
endif

" ======================================================================
set nobackup
set noswapfile
set nowritebackup
set autoread
set backupcopy=auto

set magic
set t_Co=256
set novisualbell
set viminfo+=/100  "set the limit viminfo
set ttyfast
" set ttyscroll=3
set lazyredraw
set pumheight=10
set gcr=a:blinkon0  " 禁止光标闪烁
set number          " show line number
set showcmd         " Show (partial) command in status line.
set showmatch       " Show matching brackets.
set ignorecase      " Do case insensitive matching
set smartcase       " Do smart case matching
set incsearch       " Incremental search
set hlsearch
set autowrite       " Automatically save before commands like :next  and :make
set hidden          " Hide buffers when they are abandoned
set mouse+=a        " Enable mouse usage (all modes)
set bs=2            " make backspace behave like normal again

highlight Pmenu guibg=brown gui=bold

nnoremap <leader>n :bn<cr>
nnoremap <leader>p :bp<cr>
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>h <C-w>h
nnoremap <leader>l <C-w>l
nnoremap <C-p> :CommandT<CR>


" emacs key
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation
:nnoremap <Tab> :bnext<CR>
:nnoremap <S-Tab> :bprevious<CR>
:vnoremap <Tab> >gv

set fo+=tw   "auto wrap require formatoptions+=t"
set wrap linebreak
set showbreak=↩\
set textwidth=79  " width of document (used by gd)
set colorcolumn=80
highlight ColorColumn ctermbg=240 guifg=yellow
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
highlight Pmenu term=reverse ctermbg=cyan ctermfg=black
highlight PmenuSel term=reverse ctermbg=lightred ctermfg=black


highlight ExtraWhitespace ctermbg=darkgreen ctermfg=white
match ExtraWhitespace /\s\+$/
match ExtraWhitespace /[^\t]\zs\t\+/

" Real programmers don't use TABs but spaces
set cindent
set smartindent
set sw=2
set sts=2
set ts=2
set expandtab
set pastetoggle=<F2>
autocmd FileType html,json,yaml,js setlocal shiftwidth=2 tabstop=2 sts=2 expandtab

" ColorGroup
:hi SpecialKey ctermfg=235
set listchars=tab:↦.,extends:>,precedes:<
set list

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

" backup plugin 
" Plug 'easymotion/vim-easymotion'
" Plug 'The-NERD-Commenter'
" Plug 'marijnh/tern_for_vim'
" Plug 'reedes/vim-pencil'
" Plug 'majutsushi/tagbar'
" Plug 'easymotion/vim-easymotion'
" Plug 'Shougo/vimproc.vim'
" Plug 'Shougo/vimshell.vim'
" Plug 'sjl/gundo.vim'
" Plug 'fholgado/minibufexpl.vim'
" Plug 'sheerun/vim-polyglot'
" Plug 'airblade/vim-gitgutter'
" Plug 'Shougo/vimshell.vim'
" Plug 'Shougo/vimproc.vim'
" Plug 'nvie/vim-flake8'
" Plug 'chrisgillis/vim-bootstrap3-snippets'
" Plug 'moll/vim-node'
" Plug 'kien/ctrlp.vim'
" Plug 'yegappan/grep'
" Plug 'mileszs/ack.vim'
" Plug 'suan/vim-instant-markdown'
" Plug 'briancollins/vim-jst'
" Plug 'SirVer/ultisnips'
" Plug 'ElmCast/elm-vim'
" Plug 'othree/jspc.vim'
" Plug 'wincent/command-t'
" Plug 'Auto-Pairs'

call plug#begin('~/.vim/plugged')
Plug 'elzr/vim-json'
Plug 'heavenshell/vim-jsdoc'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Valloric/YouCompleteMe'
Plug 'scrooloose/nerdtree'      "文件浏览
Plug 'mattn/emmet-vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'
Plug 'honza/vim-snippets'
Plug 'maksimr/vim-jsbeautify'
Plug 'Yggdroot/indentLine'
Plug 'scrooloose/syntastic'
Plug 'ekalinin/Dockerfile.vim'
Plug 'godlygeek/tabular'
Plug 'Shougo/unite.vim'
Plug 'fatih/vim-go'
Plug 'mhinz/vim-signify'
Plug 'pangloss/vim-javascript'
Plug 'altercation/vim-colors-solarized'
Plug 'ctrlpvim/ctrlp.vim'
call plug#end()            " required


" tagbar
nmap <F3> :NERDTreeToggle<CR>

" commenter
let g:NERDSpaceDelims=1       " 让注释符与语句之间留一个空格
let g:NERDCompactSexyComs=1   " 多行注释时样子更好看

" jedi and YCM config
autocmd FileType python,javascript,go setlocal completeopt=longest,menuone
nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>jd :YcmCompleter GoTo<CR>
inoremap <Tab> <C-x><C-o>

"注释和字符串中的文字也会被收入补全
let g:ycm_confirm_extra_conf=0
set completeopt-=preview " show the preview window
let g:ycm_add_preview_to_completeopt   = 0
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_complete_in_comments                           = 1
let g:ycm_complete_in_strings                            = 1
let g:ycm_collect_identifiers_from_comments_and_strings  = 1
let g:ycm_cache_omnifunc                      = 1
let g:ycm_min_num_of_chars_for_completion     = 1
let g:ycm_global_ycm_extra_conf               = '~/.ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tags_files = 1

" powerline
set laststatus=2

""""""""""""""""""""""""""""""
" airline
""""""""""""""""""""""""""""""
let g:airline_enable = 1
let g:airline_detect_paste=1
let g:airline_mode_map = {
  \ '__' : '-',
  \ 'n'  : 'N',
  \ 'i'  : 'I',
  \ 'R'  : 'R',
  \ 'c'  : 'C',
  \ 'v'  : 'V',
  \ 'V'  : 'V',
  \ '' : 'V',
  \ 's'  : 'S',
  \ 'S'  : 'S',
  \ '' : 'S',
  \ }


let g:syntastic_always_populate_loc_list = 0
let g:syntastic_check_on_w = 1
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_python_checkers = ['flake8']

" tern.js setting
let g:tern#is_show_argument_hints_enabled=1
let g:tern_show_argument_hints='on_hold'
let g:tern_map_keys=1

"javascript
let g:javascript_enable_domhtmlcss = 1

" markdown setting
" let g:vim_markdown_folding_disabled=1
" let g:vim_markdown_frontmatter=1

" MiniBufExpl Colors
let g:miniBufExplorerAutoStart = 1
let g:miniBufExplBuffersNeeded = 1
let g:miniBufExplStatusLineText = "-已打开文件-"

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger       = "<C-e>"
let g:UltiSnipsJumpForwardTrigger  = "<c-b>"
let g:UltiSnipsJumpBackwardTrigger = "<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" indentLine
let g:indentLine_color_term = 240
let g:indentLine_char = "|"

"html
let g:user_emmet_install_global = 0
autocmd FileType html,css,jst,jsx,js,javascript,xml,ejs EmmetInstall
let g:syntastic_html_tidy_exec           = 'tidy'
let g:syntastic_always_populate_loc_list = 1
let g:use_emmet_complete_tag             = 1
let g:user_emmet_leader_key              = '<C-l>'
let g:user_emmet_mode                    = 'a'
let g:emmet_indent_size                  = 2
let g:emmet_html5                        = 1

" web group
augroup web
    autocmd!
    autocmd FileType javascript noremap <buffer><leader><c-f> :call JsBeautify()<cr>
    autocmd FileType html noremap <buffer><leader><c-f> :call HtmlBeautify()<cr>
    autocmd FileType css noremap <buffer><leader><c-f> :call CSSBeautify()<cr>
    autocmd FileType javascript vnoremap <buffer><leader>  <c-f> :call RangeJsBeautify()<cr>
    autocmd FileType html vnoremap <buffer><leader><c-f> :call RangeHtmlBeautify()<cr>
    autocmd FileType css vnoremap <buffer><leader><c-f> :call RangeCSSBeautify()<cr>
augroup END

" golang group
let g:go_highlight_functions         = 1
let g:go_highlight_methods           = 1
let g:go_highlight_structs           = 1
let g:go_highlight_operators         = 1
let g:go_highlight_build_constraints = 1
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)


"ultisnips setting
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

"for search
let g:ackprg = 'ag --nogroup --nocolor --column'
let g:tern_request_timeout = 100


"set scheme
setglobal fileencoding=utf-8

" ================ Completion =======================
set wildmode=list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif,*.pdf
set wildignore+=/bower_components/*,/node_modules/*


highlight Cursor guifg=white guibg=green
let g:vim_json_syntax_conceal = 2

" ================ FileType =========================
" let g:CommandTInputDebounce = 20
" let g:CommandTWildIgnore = &wildignore.",**/vendor/*"
" let g:CommandTMaxHeight = 15
" let g:CommandTMaxFiles = 50
augroup file_types
    autocmd!
    autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
    autocmd BufRead,BufNewFile *.raml set filetype=yaml
    autocmd BufRead,BufNewFile *.md   set filetype=markdown
    autocmd BufRead,BufNewFile *.txt  set filetype=markdown
    autocmd BufRead,BufNewFile *.js   set ft=javascript syntax=javascript
    autocmd BufRead,BufNewFile *.ts   set ft=typescript syntax=typescript
    autocmd BufRead,BufNewFile *.es6  set ft=javascript syntax=javascript
    autocmd BufRead,BufNewFile *.twig set ft=htmldjango
    autocmd BufRead,BufNewFile *.rabl set ft=ruby
    autocmd BufRead,BufNewFile *.jade set ft=jade
augroup END

" useful keymaping
nnoremap H 00
nnoremap L $
inoremap jk <esc>


" airline setting
let g:airline_powerline_fonts = 1
let g:airline_detect_modified=1
let g:airline_detect_paste=1
let g:airline_detect_crypt=1
let g:airline_detect_spell=1
let g:airline_mode_map = {
  \ '__' : '-',
  \ 'n'  : 'N',
  \ 'i'  : 'I',
  \ 'R'  : 'R',
  \ 'c'  : 'C',
  \ 'v'  : 'V',
  \ 'V'  : 'V',
  \ '' : 'V',
  \ 's'  : 'S',
  \ 'S'  : 'S',
  \ '' : 'S',
  \ }
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" ===================== unicode symbols ==============
let g:airline_theme = "luna"
let g:airline_left_sep = '▶'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.branch = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

let g:airline_theme_patch_func = 'AirlineThemePatch'

function! AirlineThemePatch(palette)
    if g:airline_theme == 'badwolf'
      for colors in values(a:palette.inactive)
        let colors[3] = 245
      endfor
    endif
endfunction

set background=dark

" =============== GuiSetting ========================
if has("gui_running")
  if has("gui_macvim")
    set guifont=Fira\ Code:h15
    colorscheme solarized
    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    set guioptions-=L  "remove left-hand scroll bar
  endif
endif

" ================= CtrlpVim =======================
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|node_modules|vendor)$'
